<%- include('partials/header') %>
<main class="content-container">
  <% function formatCurrency(amount) { 
  return amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); 
} %>
  <section class="earnings-section">
    <h1 class="mb-4" id="top-title-h1">Income Management</h1>

    <% if (typeof alert !== 'undefined' && alert) { %>
      <div class="alert alert-<%= alert.type %> alert-dismissible fade show mb-4">
        <i class="fas fa-<%= alert.type === 'success' ? 'check' : 'exclamation' %>-circle me-2"></i>
        <%= alert.message %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% } %>

    <div class="card mb-4">
      <div class="card-header">
        <h2 class="card-title">Add New Income</h2>
      </div>
      <div class="card-body">
        <form action="/earnings" method="POST" class="income-form">
          <div class="row g-3">
            <div class="col-md-6">
              <label for="source" class="form-label">Income Source*</label>
              <div class="input-group">
                <select class="form-select" id="source-select" name="source-select" required onchange="handleSourceChange(this)">
                  <option value="" disabled selected>Select a source</option>
                  <option value="Salary">Salary</option>
                  <option value="Freelance">Freelance</option>
                  <option value="Bonus">Bonus</option>
                  <option value="Investment">Investment</option>
                  <option value="Rental">Rental Income</option>
                  <option value="Other">Other (Specify Below)</option>
                </select>
                <input type="text" class="form-control d-none" id="source-custom" name="source-custom" placeholder="Enter custom source">
              </div>
              <input type="hidden" id="source" name="source" required>
            </div>
            
            <div class="col-md-6">
              <label for="amount" class="form-label">Amount*</label>
              <div class="input-group">
                <span class="input-group-text">$</span>
                <input type="number" class="form-control" id="amount" name="amount" step="0.01" min="0.01" placeholder="0.00" required>
              </div>
            </div>

            <div class="col-md-4">
              <label for="date" class="form-label">Date*</label>
                <input type="date" class="form-control" id="date" name="date" required>
                <input type="hidden" id="timezoneOffset" name="timezoneOffset">
            </div>

            <div class="col-md-4">
              <label for="frequency" class="form-label">Frequency*</label>
              <select class="form-select" id="frequency" name="frequency" required>
                <option value="one-time">One-time</option>
                <option value="weekly">Weekly</option>
                <option value="biweekly">Bi-weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>

            <div class="col-md-4 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">
                <i class="fas fa-plus-circle me-2"></i>Add Income
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h2 class="card-title mb-0">Income History</h2>
        <span class="badge bg-success fs-6">
          Total: $<%= earnings.reduce((sum, e) => sum + e.amount, 0).toFixed(2) %>
        </span>
      </div>
      
      <div class="card-body p-0">
        <% if (earnings.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="table-light">
                <tr>
                  <th>Date</th>
                  <th>Source</th>
                  <th>Amount</th>
                  <th>Frequency</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% earnings.forEach(income => { %>
                  <tr id="income-row-<%= income._id %>">
                    <td>
                        <% const utcDate = new Date(income.date);const localDate = new Date(utcDate.getUTCFullYear(),utcDate.getUTCMonth(),utcDate.getUTCDate());%>
                        <%= localDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                    </td>
                    <td>
                      <span id="source-display-<%= income._id %>"><%= income.source %></span>
                      <div class="d-none" id="source-edit-container-<%= income._id %>">
                        <select class="form-select mb-2" id="source-edit-<%= income._id %>" onchange="handleEditSourceChange(this, '<%= income._id %>')">
                          <option value="Salary" <%= income.source === 'Salary' ? 'selected' : '' %>>Salary</option>
                          <option value="Freelance" <%= income.source === 'Freelance' ? 'selected' : '' %>>Freelance</option>
                          <option value="Bonus" <%= income.source === 'Bonus' ? 'selected' : '' %>>Bonus</option>
                          <option value="Investment" <%= income.source === 'Investment' ? 'selected' : '' %>>Investment</option>
                          <option value="Rental" <%= income.source === 'Rental' ? 'selected' : '' %>>Rental Income</option>
                          <option value="Other" <%= income.source === 'Other' || !['Salary','Freelance','Bonus','Investment','Rental'].includes(income.source) ? 'selected' : '' %>>Other</option>
                        </select>
                        <input type="text" 
                               class="form-control <%= income.source === 'Other' || !['Salary','Freelance','Bonus','Investment','Rental'].includes(income.source) ? '' : 'd-none' %>" 
                               id="source-custom-edit-<%= income._id %>" 
                               placeholder="Specify custom source"
                               value="<%= income.source === 'Other' || !['Salary','Freelance','Bonus','Investment','Rental'].includes(income.source) ? income.source : '' %>">
                      </div>
                    </td>
                    <td class="fw-bold">
                      <span id="amount-display-<%= income._id %>">$<%= income.amount.toFixed(2) %></span>
                      <div class="input-group d-none" id="amount-edit-<%= income._id %>">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" value="<%= income.amount.toFixed(2) %>" step="0.01" min="0.01">
                      </div>
                    </td>
                    <td>
                      <span id="frequency-display-<%= income._id %>" class="badge bg-<%= 
                        income.frequency === 'one-time' ? 'secondary' : 
                        income.frequency === 'weekly' ? 'info' :
                        income.frequency === 'biweekly' ? 'primary' : 'warning' %>">
                        <%= income.frequency.charAt(0).toUpperCase() + income.frequency.slice(1) %>
                      </span>
                      <select class="form-select d-none" id="frequency-edit-<%= income._id %>">
                        <option value="one-time" <%= income.frequency === 'one-time' ? 'selected' : '' %>>One-time</option>
                        <option value="weekly" <%= income.frequency === 'weekly' ? 'selected' : '' %>>Weekly</option>
                        <option value="biweekly" <%= income.frequency === 'biweekly' ? 'selected' : '' %>>Bi-weekly</option>
                        <option value="monthly" <%= income.frequency === 'monthly' ? 'selected' : '' %>>Monthly</option>
                      </select>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm" id="action-buttons-<%= income._id %>">
                        <button class="btn btn-outline-primary edit-income" data-id="<%= income._id %>">
                          <i class="fas fa-edit"></i>
                          <span class="d-none d-sm-inline">Edit</span>
                        </button>
                        <button class="btn btn-outline-danger delete-income" data-id="<%= income._id %>">
                          <i class="fas fa-trash-alt"></i>
                          <span class="d-none d-sm-inline">Delete</span>
                        </button>
                      </div>
                      <div class="btn-group btn-group-sm d-none" id="save-buttons-<%= income._id %>">
                        <button class="btn btn-success save-income" data-id="<%= income._id %>">
                          <i class="fas fa-save"></i>
                          <span class="d-none d-sm-inline">Save</span>
                        </button>
                        <button class="btn btn-outline-secondary cancel-edit" data-id="<%= income._id %>">
                          <i class="fas fa-times"></i>
                          <span class="d-none d-sm-inline">Cancel</span>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        <% } else { %>
          <div class="alert alert-info m-3">
            <i class="fas fa-info-circle me-2"></i>No income records found. Add your first income above.
          </div>
        <% } %>
      </div>
    </div>
  </section>
<%- include('partials/footer') %>
<script>
  // Source selection handling for add form
  function handleSourceChange(select) {
    const customInput = document.getElementById('source-custom');
    const hiddenInput = document.getElementById('source');
    
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
      customInput.focus();
      hiddenInput.value = customInput.value || 'Other';
    } else {
      customInput.classList.add('d-none');
      hiddenInput.value = select.value;
    }
  }

  // Auto-hide any alert message after 3 seconds
  document.addEventListener("DOMContentLoaded", function () {
    const alertEl = document.querySelector(".alert-dismissible");
    if (alertEl) {
      setTimeout(() => {
        const bsAlert = bootstrap.Alert.getOrCreateInstance(alertEl);
        bsAlert.close();
      }, 3000);
    }
  });


  // Source selection handling for edit form
  function handleEditSourceChange(select, id) {
    const customInput = document.getElementById(`source-custom-edit-${id}`);
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
      customInput.focus();
    } else {
      customInput.classList.add('d-none');
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize source select for add form
    const customInput = document.getElementById('source-custom');
    const select = document.getElementById('source-select');
    const hiddenInput = document.getElementById('source');
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    document.getElementById('date').value = `${year}-${month}-${day}`;
    document.getElementById('timezoneOffset').value = now.getTimezoneOffset();
    
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
    } else {
      customInput.classList.add('d-none');
    }
    
    customInput.addEventListener('input', function() {
      if (select.value === 'Other') {
        hiddenInput.value = this.value || 'Other';
      }
    });

    // Edit income functionality
    document.querySelectorAll('.edit-income').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, true);
      });
    });

    document.querySelectorAll('.cancel-edit').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, false);
      });
    });

    document.querySelectorAll('.save-income').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        saveIncomeChanges(id);
      });
    });

    // Delete income functionality
    document.querySelectorAll('.delete-income').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const id = this.getAttribute('data-id');
        if (confirm('Are you sure you want to delete this income record?')) {
          deleteIncome(id);
        }
      });
    });
  });

  function toggleEditMode(id, enable) {
    // Toggle display elements
    document.getElementById(`source-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`source-edit-container-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`amount-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`amount-edit-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`frequency-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`frequency-edit-${id}`).classList.toggle('d-none', !enable);
    
    // Toggle action buttons
    document.getElementById(`action-buttons-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`save-buttons-${id}`).classList.toggle('d-none', !enable);
    
    // Highlight row
    document.getElementById(`income-row-${id}`).classList.toggle('table-warning', enable);
    
    // Initialize custom source input visibility
    if (enable) {
      const sourceSelect = document.getElementById(`source-edit-${id}`);
      handleEditSourceChange(sourceSelect, id);
    }
  }

  async function saveIncomeChanges(id) {
    const sourceSelect = document.getElementById(`source-edit-${id}`);
    const customSourceInput = document.getElementById(`source-custom-edit-${id}`);
    const amountInput = document.getElementById(`amount-edit-${id}`).querySelector('input');
    const frequencySelect = document.getElementById(`frequency-edit-${id}`);
    
    let newSource = sourceSelect.value;
    // If "Other" is selected, use the custom input value
    if (newSource === 'Other') {
      newSource = customSourceInput.value.trim() || 'Other';
    }
    
    const newAmount = parseFloat(amountInput.value);
    const newFrequency = frequencySelect.value;

    if (isNaN(newAmount) || newAmount <= 0) {
      showAlert('danger', 'Please enter a valid amount');
      return;
    }

    if (newSource.trim() === '') {
      showAlert('danger', 'Please enter a source');
      return;
    }

    try {
      const response = await fetch(`/earnings/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          source: newSource,
          amount: newAmount,
          frequency: newFrequency
        })
      });

      const data = await response.json();

      if (data.success) {
        // Update display fields
        document.getElementById(`source-display-${id}`).textContent = newSource;
        document.getElementById(`amount-display-${id}`).textContent = `$${newAmount.toFixed(2)}`;
        
        // Update frequency display
        const frequencyDisplay = document.getElementById(`frequency-display-${id}`);
        frequencyDisplay.textContent = newFrequency.charAt(0).toUpperCase() + newFrequency.slice(1);
        
        // Update badge color
        const badgeClass = 
          newFrequency === 'one-time' ? 'secondary' :
          newFrequency === 'weekly' ? 'info' :
          newFrequency === 'biweekly' ? 'primary' : 'warning';
        frequencyDisplay.className = `badge bg-${badgeClass}`;
        
        toggleEditMode(id, false);
        if (data.alert) {
          showAlert(data.alert.type, data.alert.message);
        }
      } else {
        throw new Error(data.error || 'Failed to update income');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message || 'An error occurred while updating the income');
    }
  }

  async function deleteIncome(id) {
    try {
      const response = await fetch(`/earnings/${id}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Show the alert before removing the row
        if (result.alert) {
          showAlert(result.alert.type, result.alert.message);
        }
        
        // Remove the row from the UI
        const row = document.getElementById(`income-row-${id}`);
        if (row) {
          row.classList.add('fade-out');
          
          
          setTimeout(() => {
            row.remove();
            updateTotalDisplay();
          }, 300);
        }
      } else {
        throw new Error(result.error || 'Failed to delete income');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message);
    }
}

function updateTotalDisplay() {
  setTimeout(() =>{
    window.location.reload();
  }, 2000);
}

function showAlert(type, message) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
  alertDiv.setAttribute('role', 'alert');
  alertDiv.innerHTML = `
    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle me-2"></i>
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;

  const h1 = document.getElementById('top-title-h1');

  if (h1) {
    h1.insertAdjacentElement('afterend', alertDiv);
  } else {
    container.prepend(alertDiv);
  }

  // Auto-hide after 3 seconds
  setTimeout(() => {
    const alertInstance = bootstrap.Alert.getOrCreateInstance(alertDiv);
    alertInstance.close();
  }, 3000);
}


</script>