<%- include('partials/header') %>
<% function formatCurrency(amount) { 
  return amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); 
} %>
<main class="content-container">
  <section class="earnings-section">
    <h1 class="section-title"><%= t('earnings.title') %></h1>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-danger">
        <i class="fas fa-exclamation-circle"></i> <%= error %>
      </div>
    <% } %>
    
    <% if (typeof success !== 'undefined' && success) { %>
      <div class="alert alert-success">
        <i class="fas fa-check-circle"></i> <%= success %>
      </div>
    <% } %>

    <div class="card mb-4">
      <div class="card-header">
        <h2 class="card-title"><%= t('earnings.addNew') %></h2>
      </div>
      <div class="card-body">
        <form action="/earnings" method="POST" class="income-form">
          <div class="row g-3">
            <div class="col-md-6">
              <label for="source" class="form-label"><%= t('earnings.source') %>*</label>
              <div class="input-group">
                <select class="form-select" id="source-select" name="source-select" required
                  onchange="handleSourceChange(this)">
                  <option value="" disabled <%= !formData || !formData.source ? 'selected' : '' %>><%= t('earnings.selectSource') %></option>
                  <option value="Salary" <%= formData && formData.source === 'Salary' ? 'selected' : '' %>><%= t('earnings.salary') %></option>
                  <option value="Freelance" <%= formData && formData.source === 'Freelance' ? 'selected' : '' %>><%= t('earnings.freelance') %></option>
                  <option value="Bonus" <%= formData && formData.source === 'Bonus' ? 'selected' : '' %>><%= t('earnings.bonus') %></option>
                  <option value="Investment" <%= formData && formData.source === 'Investment' ? 'selected' : '' %>><%= t('earnings.investment') %></option>
                  <option value="Rental" <%= formData && formData.source === 'Rental' ? 'selected' : '' %>><%= t('earnings.rental') %></option>
                  <option value="Other" <%= formData && formData.source === 'Other' ? 'selected' : '' %>><%= t('earnings.other') %></option>
                </select>
                <input type="text"
                      class="form-control <%= formData && formData.source === 'Other' ? '' : 'd-none' %>"
                      id="source-custom"
                      name="source-custom"
                      placeholder="<%= t('earnings.customPlaceholder') %>"
                      value="<%= formData && formData.source === 'Other' ? formData.customSource : '' %>">
              </div>
              <input type="hidden" 
                    id="source" 
                    name="source" 
                    value="<%= formData ? formData.source : '' %>"
                    required>
            </div>
            
            <div class="col-md-6">
              <label for="amount" class="form-label"><%= t('earnings.amount') %>*</label>
              <div class="input-group">
                <span class="input-group-text">$</span>
                <input 
                  type="number" 
                  class="form-control" 
                  id="amount" 
                  name="amount" 
                  step="0.01" 
                  min="0.01" 
                  placeholder="0.00" 
                  required
                  value="<%= typeof formData !== 'undefined' ? formData.amount : '' %>"
                >
              </div>
            </div>

            <div class="col-md-4">
              <label for="date" class="form-label"><%= t('earnings.date') %>*</label>
              <input 
                type="date" 
                class="form-control" 
                id="date" 
                name="date" 
                required
                value="<%= typeof formData !== 'undefined' ? formData.date : new Date().toISOString().split('T')[0] %>"
              >
            </div>

            <div class="col-md-4">
              <label for="frequency" class="form-label"><%= t('earnings.frequency') %>*</label>
              <select class="form-select" id="frequency" name="frequency" required>
                <option value="one-time" <%= typeof formData !== 'undefined' && formData.frequency === 'one-time' ? 'selected' : '' %>><%= t('earnings.oneTime') %></option>
                <option value="weekly" <%= typeof formData !== 'undefined' && formData.frequency === 'weekly' ? 'selected' : '' %>><%= t('earnings.weekly') %></option>
                <option value="biweekly" <%= typeof formData !== 'undefined' && formData.frequency === 'biweekly' ? 'selected' : '' %>><%= t('earnings.biweekly') %></option>
                <option value="monthly" <%= typeof formData !== 'undefined' && formData.frequency === 'monthly' ? 'selected' : '' %>><%= t('earnings.monthly') %></option>
              </select>
            </div>

            <div class="col-md-4 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">
                <i class="fas fa-plus-circle"></i> <%= t('earnings.addIncome') %>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <% if (typeof earnings !== 'undefined' && earnings.length > 0) { %>
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h2 class="card-title"><%= t('earnings.history') %></h2>
          <span class="badge bg-success fs-6">
            <%= t('earnings.total') %>: $<%= formatCurrency(earnings.reduce((sum, e) => sum + e.amount, 0)) %>
          </span>
        </div>
        
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="table-light">
                <tr>
                  <th><%= t('earnings.table.date') %></th>
                  <th><%= t('earnings.table.source') %></th>
                  <th><%= t('earnings.table.amount') %></th>
                  <th><%= t('earnings.table.frequency') %></th>
                  <th><%= t('earnings.table.actions') %></th>
                </tr>
              </thead>
              <tbody>
                <% earnings.forEach(income => { %>
                  <tr>
                    <td><%= income.date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %></td>
                    <td><%= income.source %></td>
                    <td class="fw-bold">$<%= formatCurrency(income.amount) %></td>
                    <td>
                      <span class="badge bg-<%= 
                        income.frequency === 'one-time' ? 'secondary' : 
                        income.frequency === 'weekly' ? 'info' :
                        income.frequency === 'biweekly' ? 'primary' : 'warning'
                      %>">
                        <%= t('earnings.' + (income.frequency === 'one-time' ? 'oneTime' : income.frequency)) %>
                      </span>
                    </td>
                    <td>
                      <form action="/earnings/<%= income._id %>?_method=DELETE" method="POST" class="d-inline">
                        <button type="submit" class="btn btn-sm btn-outline-danger">
                          <i class="fas fa-trash-alt"></i> <%= t('earnings.delete') %>
                        </button>
                      </form>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    <% } else { %>
      <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> <%= t('earnings.noRecords') %>
      </div>
    <% } %>
  </section>

<%- include('partials/footer') %>

<script>
  // Source selection handling for add form
  function handleSourceChange(select) {
    const customInput = document.getElementById('source-custom');
    const hiddenInput = document.getElementById('source');
    
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
      customInput.focus();
      hiddenInput.value = customInput.value || 'Other';
    } else {
      customInput.classList.add('d-none');
      hiddenInput.value = select.value;
    }
  }

  // Auto-hide any alert message after 3 seconds
  document.addEventListener("DOMContentLoaded", function () {
    const alertEl = document.querySelector(".alert-dismissible");
    if (alertEl) {
      setTimeout(() => {
        const bsAlert = bootstrap.Alert.getOrCreateInstance(alertEl);
        bsAlert.close();
      }, 3000);
    }
  });


  // Source selection handling for edit form
  function handleEditSourceChange(select, id) {
    const customInput = document.getElementById(`source-custom-edit-${id}`);
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
      customInput.focus();
    } else {
      customInput.classList.add('d-none');
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize source select for add form
    const customInput = document.getElementById('source-custom');
    const select = document.getElementById('source-select');
    const hiddenInput = document.getElementById('source');
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    document.getElementById('date').value = `${year}-${month}-${day}`;
    document.getElementById('timezoneOffset').value = now.getTimezoneOffset();
    
    if (select.value === 'Other') {
      customInput.classList.remove('d-none');
    } else {
      customInput.classList.add('d-none');
    }
    
    customInput.addEventListener('input', function() {
      if (select.value === 'Other') {
        hiddenInput.value = this.value || 'Other';
      }
    });

    // Edit income functionality
    document.querySelectorAll('.edit-income').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, true);
      });
    });

    document.querySelectorAll('.cancel-edit').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, false);
      });
    });

    document.querySelectorAll('.save-income').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        saveIncomeChanges(id);
      });
    });

    // Delete income functionality
    document.querySelectorAll('.delete-income').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const id = this.getAttribute('data-id');
        if (confirm('Are you sure you want to delete this income record?')) {
          deleteIncome(id);
        }
      });
    });
  });

  function toggleEditMode(id, enable) {
    // Toggle display elements
    document.getElementById(`source-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`source-edit-container-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`amount-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`amount-edit-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`frequency-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`frequency-edit-${id}`).classList.toggle('d-none', !enable);
    
    // Toggle action buttons
    document.getElementById(`action-buttons-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`save-buttons-${id}`).classList.toggle('d-none', !enable);
    
    // Highlight row
    document.getElementById(`income-row-${id}`).classList.toggle('table-warning', enable);
    
    // Initialize custom source input visibility
    if (enable) {
      const sourceSelect = document.getElementById(`source-edit-${id}`);
      handleEditSourceChange(sourceSelect, id);
    }
  }

  async function saveIncomeChanges(id) {
    const sourceSelect = document.getElementById(`source-edit-${id}`);
    const customSourceInput = document.getElementById(`source-custom-edit-${id}`);
    const amountInput = document.getElementById(`amount-edit-${id}`).querySelector('input');
    const frequencySelect = document.getElementById(`frequency-edit-${id}`);
    
    let newSource = sourceSelect.value;
    // If "Other" is selected, use the custom input value
    if (newSource === 'Other') {
      newSource = customSourceInput.value.trim() || 'Other';
    }
    
    const newAmount = parseFloat(amountInput.value);
    const newFrequency = frequencySelect.value;

    if (isNaN(newAmount) || newAmount <= 0) {
      showAlert('danger', 'Please enter a valid amount');
      return;
    }

    if (newSource.trim() === '') {
      showAlert('danger', 'Please enter a source');
      return;
    }

    try {
      const response = await fetch(`/earnings/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          source: newSource,
          amount: newAmount,
          frequency: newFrequency
        })
      });

      const data = await response.json();

      if (data.success) {
        // Update display fields
        document.getElementById(`source-display-${id}`).textContent = newSource;
        document.getElementById(`amount-display-${id}`).textContent = `$${newAmount.toFixed(2)}`;
        
        // Update frequency display
        const frequencyDisplay = document.getElementById(`frequency-display-${id}`);
        frequencyDisplay.textContent = newFrequency.charAt(0).toUpperCase() + newFrequency.slice(1);
        
        // Update badge color
        const badgeClass = 
          newFrequency === 'one-time' ? 'secondary' :
          newFrequency === 'weekly' ? 'info' :
          newFrequency === 'biweekly' ? 'primary' : 'warning';
        frequencyDisplay.className = `badge bg-${badgeClass}`;
        
        toggleEditMode(id, false);
        if (data.alert) {
          showAlert(data.alert.type, data.alert.message);
        }
      } else {
        throw new Error(data.error || 'Failed to update income');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message || 'An error occurred while updating the income');
    }
  }

  async function deleteIncome(id) {
    try {
      const response = await fetch(`/earnings/${id}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Show the alert before removing the row
        if (result.alert) {
          showAlert(result.alert.type, result.alert.message);
        }
        
        // Remove the row from the UI
        const row = document.getElementById(`income-row-${id}`);
        if (row) {
          row.classList.add('fade-out');
          
          
          setTimeout(() => {
            row.remove();
            updateTotalDisplay();
          }, 300);
        }
      } else {
        throw new Error(result.error || 'Failed to delete income');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message);
    }
}

function updateTotalDisplay() {
  setTimeout(() =>{
    window.location.reload();
  }, 2000);
}

function showAlert(type, message) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
  alertDiv.setAttribute('role', 'alert');
  alertDiv.innerHTML = `
    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle me-2"></i>
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;

  const h1 = document.getElementById('top-title-h1');

  if (h1) {
    h1.insertAdjacentElement('afterend', alertDiv);
  } else {
    container.prepend(alertDiv);
  }

  // Auto-hide after 3 seconds
  setTimeout(() => {
    const alertInstance = bootstrap.Alert.getOrCreateInstance(alertDiv);
    alertInstance.close();
  }, 3000);
}


</script>