<div class="layout">
<%- include("partials/header.ejs") %>
<% function formatCurrency(amount) { 
  return amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); 
} %>
<main class="content-container">
  <section class="expenses-section">
    <h1 class="mb-4" id="top-title-h1">Expense Management</h1>

    <% if (typeof alert !== 'undefined' && alert) { %>
      <div class="alert alert-<%= alert.type %> alert-dismissible fade show mb-4">
        <i class="fas fa-<%= alert.type === 'success' ? 'check' : 'exclamation' %>-circle me-2"></i>
        <%= alert.message %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% } %>

    <div class="card mb-4">
      <div class="card-header">
        <h2 class="card-title">Add New Expense</h2>
      </div>
      <div class="card-body">
        <form action="/expenses" method="POST" class="expense-form">
          <div class="row g-3">
            <div class="col-md-4">
              <label for="category" class="form-label">Category*</label>
              <select class="form-select" id="category" name="category" required>
                <option value="" disabled selected>Select a category</option>
                <option value="Housing" <%= formData && formData.category === 'Housing' ? 'selected' : '' %>>Housing</option>
                <option value="Food" <%= formData && formData.category === 'Food' ? 'selected' : '' %>>Food</option>
                <option value="Transportation" <%= formData && formData.category === 'Transportation' ? 'selected' : '' %>>Transportation</option>
                <option value="Utilities" <%= formData && formData.category === 'Utilities' ? 'selected' : '' %>>Utilities</option>
                <option value="Entertainment" <%= formData && formData.category === 'Entertainment' ? 'selected' : '' %>>Entertainment</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="name" class="form-label">Expense Name*</label>
              <input 
                type="text" 
                class="form-control" 
                id="name" 
                name="name" 
                placeholder="e.g. Groceries, Rent" 
                required
                value="<%= typeof formData !== 'undefined' ? formData.name : '' %>"
              >
            </div>

            <div class="col-md-4">
              <label for="amount" class="form-label">Amount*</label>
              <div class="input-group">
                <span class="input-group-text">$</span>
                <input 
                  type="number" 
                  class="form-control" 
                  id="amount" 
                  name="amount" 
                  step="0.01" 
                  min="0.01" 
                  placeholder="0.00" 
                  required
                  value="<%= typeof formData !== 'undefined' ? formData.amount : '' %>"
                >
              </div>
            </div>

            <div class="col-md-4">
              <label for="date" class="form-label">Date*</label>
              <input 
                type="date" 
                class="form-control" 
                id="date" 
                name="date" 
                required
                value="<%= typeof formData !== 'undefined' ? formData.date : new Date().toISOString().split('T')[0] %>"
              >
              <input type="hidden" id="timezoneOffset" name="timezoneOffset">
            </div>

            <div class="col-md-4">
              <label for="frequency" class="form-label">Frequency*</label>
              <select class="form-select" id="frequency" name="frequency" <%= !formData || !formData.isRecurring ? 'disabled' : '' %>>
                <option value="one-time" <%= formData && formData.frequency === 'one-time' ? 'selected' : '' %>>One-time</option>
                <option value="weekly" <%= formData && formData.frequency === 'weekly' ? 'selected' : '' %>>Weekly</option>
                <option value="monthly" <%= formData && formData.frequency === 'monthly' ? 'selected' : '' %>>Monthly</option>
              </select>
            </div>

            <div class="col-md-4 d-flex align-items-end">
              <div class="form-check form-switch">
                <input 
                  class="form-check-input" 
                  type="checkbox" 
                  id="isRecurring" 
                  name="isRecurring"
                  <%= formData && formData.isRecurring === 'on' ? 'checked' : '' %>
                >
                <label class="form-check-label" for="isRecurring">Recurring Expense</label>
              </div>
            </div>

            <div class="col-12">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus-circle me-2"></i>Add Expense
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h2 class="card-title mb-0">Expense History</h2>
        <span class="badge bg-danger fs-6">
          Total: $<%= expenses.reduce((sum, e) => sum + e.amount, 0).toFixed(2) %>
        </span>
      </div>
      
      <div class="card-body p-0">
        <% if (expenses.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="table-light">
                <tr>
                  <th>Date</th>
                  <th>Category</th>
                  <th>Name</th>
                  <th>Amount</th>
                  <th>Frequency</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% expenses.forEach(expense => { %>
                  <tr id="expense-row-<%= expense._id %>" class="<%= expense.isRecurring && expense.nextOccurrence && new Date(expense.nextOccurrence) < new Date() ? 'table-danger' : '' %>">
                    <td>
                      <% const utcDate = new Date(expense.date);const localDate = new Date(utcDate.getUTCFullYear(),utcDate.getUTCMonth(),utcDate.getUTCDate());%>
                      <%= localDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                    </td>
                    <td>
                      <span id="category-display-<%= expense._id %>" class="badge bg-<%= 
                        expense.category === 'Housing' ? 'primary' : 
                        expense.category === 'Food' ? 'success' :
                        expense.category === 'Transportation' ? 'info' :
                        expense.category === 'Utilities' ? 'warning' : 'secondary'
                      %>">
                        <%= expense.category %>
                      </span>
                      <select class="form-select d-none" id="category-edit-<%= expense._id %>">
                        <option value="Housing" <%= expense.category === 'Housing' ? 'selected' : '' %>>Housing</option>
                        <option value="Food" <%= expense.category === 'Food' ? 'selected' : '' %>>Food</option>
                        <option value="Transportation" <%= expense.category === 'Transportation' ? 'selected' : '' %>>Transportation</option>
                        <option value="Utilities" <%= expense.category === 'Utilities' ? 'selected' : '' %>>Utilities</option>
                        <option value="Entertainment" <%= expense.category === 'Entertainment' ? 'selected' : '' %>>Entertainment</option>
                      </select>
                    </td>
                    <td>
                      <span id="name-display-<%= expense._id %>"><%= expense.name %></span>
                      <input type="text" class="form-control d-none" id="name-edit-<%= expense._id %>" value="<%= expense.name %>">
                    </td>
                    <td class="fw-bold">
                      <span id="amount-display-<%= expense._id %>">$<%= expense.amount.toFixed(2) %></span>
                      <div class="input-group d-none" id="amount-edit-<%= expense._id %>">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" value="<%= expense.amount.toFixed(2) %>" step="0.01" min="0.01">
                      </div>
                    </td>
                    <td>
                      <% if (expense.isRecurring) { %>
                        <span id="frequency-display-<%= expense._id %>" class="badge bg-<%= 
                          expense.frequency === 'weekly' ? 'info' :
                          expense.frequency === 'monthly' ? 'warning' : 'secondary'
                        %>">
                          <i class="fas fa-repeat me-1"></i>
                          <%= expense.frequency.charAt(0).toUpperCase() + expense.frequency.slice(1) %>
                        </span>
                      <% } else { %>
                        <span id="frequency-display-<%= expense._id %>" class="badge bg-secondary">
                          <i class="fas fa-times me-1"></i> One-time
                        </span>
                      <% } %>
                      <div class="d-none" id="frequency-edit-container-<%= expense._id %>">
                        <div class="form-check form-switch mb-2">
                          <input class="form-check-input" type="checkbox" id="isRecurring-edit-<%= expense._id %>" <%= expense.isRecurring ? 'checked' : '' %>>
                          <label class="form-check-label" for="isRecurring-edit-<%= expense._id %>">Recurring</label>
                        </div>
                        <select class="form-select" id="frequency-edit-<%= expense._id %>" <%= !expense.isRecurring ? 'disabled' : '' %>>
                          <option value="one-time" <%= expense.frequency === 'one-time' ? 'selected' : '' %>>One-time</option>
                          <option value="weekly" <%= expense.frequency === 'weekly' ? 'selected' : '' %>>Weekly</option>
                          <option value="monthly" <%= expense.frequency === 'monthly' ? 'selected' : '' %>>Monthly</option>
                        </select>
                      </div>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm" id="action-buttons-<%= expense._id %>">
                        <button class="btn btn-outline-primary edit-expense" data-id="<%= expense._id %>">
                          <i class="fas fa-edit"></i>
                          <span class="d-none d-sm-inline">Edit</span>
                        </button>
                        <button class="btn btn-outline-danger delete-expense" data-id="<%= expense._id %>">
                          <i class="fas fa-trash-alt"></i>
                          <span class="d-none d-sm-inline">Delete</span>
                        </button>
                      </div>
                      <div class="btn-group btn-group-sm d-none" id="save-buttons-<%= expense._id %>">
                        <button class="btn btn-success save-expense" data-id="<%= expense._id %>">
                          <i class="fas fa-save"></i>
                          <span class="d-none d-sm-inline">Save</span>
                        </button>
                        <button class="btn btn-outline-secondary cancel-edit" data-id="<%= expense._id %>">
                          <i class="fas fa-times"></i>
                          <span class="d-none d-sm-inline">Cancel</span>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        <% } else { %>
          <div class="alert alert-info m-3">
            <i class="fas fa-info-circle me-2"></i>No expense records found. Add your first expense above.
          </div>
        <% } %>
      </div>
    </div>
  </section>

<%- include('partials/footer') %>
</div>

<script>
  // Enable/disable frequency based on recurring toggle
  document.getElementById('isRecurring').addEventListener('change', function() {
    const frequencySelect = document.getElementById('frequency');
    frequencySelect.disabled = !this.checked;
    if (!this.checked) {
      frequencySelect.value = 'one-time';
    }
  });

  // Initialize form state on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Set current date and timezone offset
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    document.getElementById('date').value = `${year}-${month}-${day}`;
    document.getElementById('timezoneOffset').value = now.getTimezoneOffset();
    
    // Initialize recurring toggle
    const recurringCheckbox = document.getElementById('isRecurring');
    const frequencySelect = document.getElementById('frequency');
    frequencySelect.disabled = !recurringCheckbox.checked;

    // Edit expense functionality
    document.querySelectorAll('.edit-expense').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, true);
      });
    });

    document.querySelectorAll('.cancel-edit').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        toggleEditMode(id, false);
      });
    });

    document.querySelectorAll('.save-expense').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        saveExpenseChanges(id);
      });
    });

    // Delete expense functionality
    document.querySelectorAll('.delete-expense').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const id = this.getAttribute('data-id');
        if (confirm('Are you sure you want to delete this expense record?')) {
          deleteExpense(id);
        }
      });
    });
 
    const autoAlert = document.querySelector(".alert-dismissible");
    if (autoAlert) {
      setTimeout(() => {
        const alertInstance = bootstrap.Alert.getOrCreateInstance(autoAlert);
        alertInstance.close();
      }, 3000); // or 5000 ms if you want it to stay longer
    }
  });

  function toggleEditMode(id, enable) {
    // Toggle display elements
    document.getElementById(`category-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`category-edit-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`name-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`name-edit-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`amount-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`amount-edit-${id}`).classList.toggle('d-none', !enable);
    document.getElementById(`frequency-display-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`frequency-edit-container-${id}`).classList.toggle('d-none', !enable);
    
    // Toggle action buttons
    document.getElementById(`action-buttons-${id}`).classList.toggle('d-none', enable);
    document.getElementById(`save-buttons-${id}`).classList.toggle('d-none', !enable);
    
    // Highlight row
    document.getElementById(`expense-row-${id}`).classList.toggle('table-warning', enable);
    
    // Initialize recurring toggle in edit mode
    if (enable) {
      const recurringCheckbox = document.getElementById(`isRecurring-edit-${id}`);
      const frequencySelect = document.getElementById(`frequency-edit-${id}`);
      
      recurringCheckbox.addEventListener('change', function() {
        frequencySelect.disabled = !this.checked;
        if (!this.checked) {
          frequencySelect.value = 'one-time';
        }
      });
    }
  }

  async function saveExpenseChanges(id) {
    const categorySelect = document.getElementById(`category-edit-${id}`);
    const nameInput = document.getElementById(`name-edit-${id}`);
    const amountInput = document.getElementById(`amount-edit-${id}`).querySelector('input');
    const recurringCheckbox = document.getElementById(`isRecurring-edit-${id}`);
    const frequencySelect = document.getElementById(`frequency-edit-${id}`);
    
    const newCategory = categorySelect.value;
    const newName = nameInput.value.trim();
    const newAmount = parseFloat(amountInput.value);
    const newIsRecurring = recurringCheckbox.checked;
    const newFrequency = newIsRecurring ? frequencySelect.value : 'one-time';

    if (isNaN(newAmount) || newAmount <= 0) {
      showAlert('danger', 'Please enter a valid amount');
      return;
    }

    if (newName === '') {
      showAlert('danger', 'Please enter a name');
      return;
    }

    try {
      const response = await fetch(`/expenses/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          category: newCategory,
          name: newName,
          amount: newAmount,
          isRecurring: newIsRecurring ? 'on' : 'off',
          frequency: newFrequency
        })
      });

      const data = await response.json();

      if (data.success) {
        // Update display fields
        document.getElementById(`category-display-${id}`).textContent = newCategory;
        document.getElementById(`category-display-${id}`).className = `badge bg-${
          newCategory === 'Housing' ? 'primary' : 
          newCategory === 'Food' ? 'success' :
          newCategory === 'Transportation' ? 'info' :
          newCategory === 'Utilities' ? 'warning' : 'secondary'
        }`;
        
        document.getElementById(`name-display-${id}`).textContent = newName;
        document.getElementById(`amount-display-${id}`).textContent = `$${newAmount.toFixed(2)}`;
        
        // Update frequency display
        const frequencyDisplay = document.getElementById(`frequency-display-${id}`);
        if (newIsRecurring) {
          frequencyDisplay.innerHTML = `<i class="fas fa-repeat me-1"></i>${newFrequency.charAt(0).toUpperCase() + newFrequency.slice(1)}`;
          frequencyDisplay.className = `badge bg-${
            newFrequency === 'weekly' ? 'info' :
            newFrequency === 'monthly' ? 'warning' : 'secondary'
          }`;
        } else {
          frequencyDisplay.innerHTML = '<i class="fas fa-times me-1"></i> One-time';
          frequencyDisplay.className = 'badge bg-secondary';
        }
        
        toggleEditMode(id, false);
        if (data.alert) {
          showAlert(data.alert.type, data.alert.message);
        }
      } else {
        throw new Error(data.error || 'Failed to update expense');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message || 'An error occurred while updating the expense');
    }
  }

  async function deleteExpense(id) {
    try {
      const response = await fetch(`/expenses/${id}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Show the alert before removing the row
        if (result.alert) {
          showAlert(result.alert.type, result.alert.message);
        }
        
        // Remove the row from the UI
        const row = document.getElementById(`expense-row-${id}`);
        if (row) {
          row.classList.add('fade-out');
          
          setTimeout(() => {
            row.remove();
            updateTotalDisplay();
          }, 300);
        }
      } else {
        throw new Error(result.error || 'Failed to delete expense');
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('danger', error.message);
    }
  }

  function updateTotalDisplay() {
    setTimeout(() => {
      window.location.reload();
    }, 2000);
  }

  function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
    alertDiv.setAttribute('role', 'alert');
    alertDiv.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle me-2"></i>
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    const h1 = document.getElementById('top-title-h1');

    if (h1) {
      h1.insertAdjacentElement('afterend', alertDiv);
    } else {
      container.prepend(alertDiv);
    }

    // Auto-hide after 3 seconds
    setTimeout(() => {
      const alertInstance = bootstrap.Alert.getOrCreateInstance(alertDiv);
      alertInstance.close();
    }, 3000);
  }
</script>